" Vimrc for Jansen Price <jansen.price@gmail.com>

" Options {{{1

" 1 important {{{2
" -----------------------------------
set nocompatible " Disable vi-compatible mode

" 2 moving around, searching and patterns {{{2
" -----------------------------------
"set autochdir " Always switch to the current file directory
set incsearch " Incremental search
set smartcase " Use smart case searching

" 3 tags {{{2
" -----------------------------------

" 4 displaying text {{{2
" -----------------------------------
set scrolloff=2 " Keep 2 lines on top and bottom
set wrap " Long lines wrap
set showbreak=↪ " String to put before wrapped screen lines
set lazyredraw " Do not redraw while running macros
"set list " Show whitespace characters
"set listchars=eol:#,tab:>-,trail:· " Whitespace characters
set listchars=tab:>-,trail:· " Whitespace characters
set number " Show line numbers

" 5 syntax, highlighting and spelling {{{2
" -----------------------------------
if exists('&syntax')
    syntax on
endif
if exists(':filetype')
    filetype plugin indent on " load filetype plugins/indent settings
endif
set background=dark
set synmaxcol=1024 " Only apply syntax coloring for lines up to x chars
set hlsearch " Highlight search matches

" 6 multiple windows {{{2
" -----------------------------------
set laststatus=2 " Always show status line
set statusline=[%n]\ %f\ %m%r%h%w%=[%{&ff},%{&fenc}]\ [ai%{&ai},et%{&et}]\ [%l,%v]\ [%LL][%p%%]
"set hidden " Hide buffers when they are abandoned

" 7 multiple tab pages {{{2
" -----------------------------------
set showtabline=2 " Always show the tabline (helpful for window size)

" 8 terminal {{{2
" -----------------------------------
set ttyfast " Fast terminal for smoother redrawing

" 9 using the mouse {{{2
" -----------------------------------
if has('mouse')
    set mouse=a " Enable mouse usage (all modes) in terminals
endif

" 10 GUI {{{2
" -----------------------------------
if exists(':let')
    colorscheme tango " Set colorscheme
endif

if has('gui_running')
    " Set size of window
    set columns=84
    set lines=46

    set guioptions-=T
    set guioptions-=m
    set guioptions-=M
    set guioptions+=r
    set guioptions+=l

    "if has('win32')
        "set guifont=Envy_Code_R:h10:cANSI
    "else
        "set guifont=Envy\ Code\ R\ 10
    "endif

    " Maximize (Windows only)
    if has('win32')
        au GUIEnter * simalt ~x
    endif
endif

" 11 printing {{{2
" -----------------------------------

" 12 messages and info {{{2
" -----------------------------------
set showcmd " Show (partial) command in status line
set ruler " Show the line and col number of the cursor position
set noerrorbells " Don't beep for error messages
set novisualbell " No visual bell
set vb t_vb= " No beeps or flash

" 13 selecting text {{{2
" -----------------------------------

" 14 editing text {{{2
" -----------------------------------
"set textwidth=79 " Autmatically break long lines while typing
set textwidth=0 " No breaking of long lines while typing
set backspace=indent,eol,start " more powerful backspacing
set showmatch " Show matching brackets.

" 15 tabs and indenting {{{2
" -----------------------------------
set tabstop=4 " Number of spaces that a tab in the file counts
set shiftwidth=4 " Number of spaces to use for auto-indent
set softtabstop=4 " How many spaces per tab during edit operations
set expandtab " Expand <Tab> to spaces in Insert mode
set autoindent " Automatically set the indent of a new line

" 16 folding {{{2
" -----------------------------------
if exists('&foldenable')
    set foldenable " Turn on folding
    set foldmethod=marker " Fold using markers
endif

" 17 diff mode {{{2
" -----------------------------------

" 18 mapping {{{2
" -----------------------------------

" 19 reading and writing files {{{2
" -----------------------------------
set fileformats=unix,dos " Support for fileformats
set nobackup " Don't make backup files
set autowrite " Automatically save before commands like :next and :make

" 20 the swap file {{{2
" -----------------------------------
set directory=~/.vim/tmp " Set directory for swap files

" 21 command line editing {{{2
" -----------------------------------
set wildmenu " Use enhanced mode of command-line completion

" 22 executing external commands {{{2
" -----------------------------------

" 23 running make and jumping to errors {{{2
" -----------------------------------

" 24 language specific {{{2
" -----------------------------------

" 25 multi-byte characters {{{2
" -----------------------------------
set encoding=utf-8 " Set utf-8 encoding

" 26 various {{{2
" -----------------------------------

" Autocommands {{{1
" -----------------------------------

" PHP
if exists(':au')
    au BufRead,BufNewFile *.php set makeprg=php\ -l\ %
    au BufRead,BufNewFile *.php set errorformat=%m\ in\ %f\ on\ line\ %l
    au BufRead,BufNewFile *.php nnoremap <buffer> <C-P> :call PhpDocSingle()<CR>
    au BufRead,BufNewFile *.php vnoremap <buffer> <C-P> :call PhpDocRange()<CR>

    " Set dictionary for PHP
    " TODO Need better solution for php dict or else remove
    "au BufRead,BufNewFile *.php set dictionary=~/.vim/dict/php

    " epub
    au BufReadCmd   *.epub      call zip#Browse(expand("<amatch>"))

    " Indent xml
    au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
endif

" Used for highlighting lines more than 80 characters long
set colorcolumn=89
highlight OverLength ctermbg=red ctermfg=white guibg=#592929

" Mappings {{{1
" -----------------------------------

map <F1> :SwapColorscheme<CR>

" Map F2 to toggle highlight search results
map <F2> :set hlsearch!<CR>:set hlsearch?<CR>

" Map Ctrl-F2 to toggle spell check mode
map <C-F2> :set spell!<CR>:set spell?<CR>

" Map F3 to go to the previous buffer
map <F3> :bprev<CR>

" Map F4 to go to the next buffer
map <F4> :bnext<CR>

" Map F5 to toggle marks browser
map <F5> :MarksBrowser<CR>

" Map F6 to toggle the Nerd tree
map <F6> :NERDTreeToggle<CR>
" Map ctrl-F6 to go to the topmost/leftmost window
map <C-F6> :wincmd t<CR>

" Map F7 to toggle the Tagbar
map <F7> :TagbarToggle<CR>

" Map F8 to next loc
map <F8> :lnext<CR>

" Map Shift-F8 to prev loc
map <S-F8> :lprev<CR>

" Map Ctrl-F8 to trigger make
map <C-F8> :make<CR>

" Map F9 to open loclist
map <F9> :lopen<CR>

" Map Ctrl-F9 to open buffer list
map <C-F9> :BufExplorer<CR>
" map <C-F9> :buffers<CR>:b

" Map F10 to close the current window
map <F10> :clo<CR>

" Map F11 to toggle showing hidden chars
map <F11> :set list!<CR>:set list?<CR>

" Map Ctrl-F11 to start debugger
map <C-F11> :LaunchDebugger<CR>

" Make gb go to the next buffer
nnoremap gb :bnext<CR>

" Make gr go to previous tab
nnoremap gr :tabprev<CR>

" Keep the text highlighted when tab-shifting
vnoremap < <gv
vnoremap > >gv

" Prevent error messages when mistyping :w and :q
if exists(':command')
    command! W w
    command! Q q
endif

" Map <leader>5 to Clean up file
noremap <silent> <leader>5 m`:call Cleanup()<CR>``zz

" Map <leader>8 to highlight line limit
noremap <silent> <leader>8 :set colorcolumn=89<CR>

" Map <leader>7 to turn off highlighting line limit
noremap <silent> <leader>7 :set colorcolumn=<CR>

" Column scroll-binding on <leader>sb
noremap <silent> <leader>sb :<C-u>let @z=&so<CR>:set so=0 noscb<CR>:bo vs<CR>Ljzt:setl scb<CR><C-w>p:setl scb<CR>:let &so=@z<CR>

" delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" replace currently selected text with default register
" without yanking it
vnoremap <leader>p "_dP

" Plugin Settings {{{1
" -----------------------------------

" Init Plug
if exists(':call')
    call plug#begin('~/.vim/plugged')
    Plug 'alvan/vim-php-manual'
    Plug 'corntrace/bufexplorer'
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'dense-analysis/ale'
    Plug 'ervandew/supertab'
    Plug 'gregsexton/gitv', {'on': ['Gitv']}
    Plug 'leafgarland/typescript-vim'
    Plug 'majutsushi/tagbar', {'on': ['TagbarToggle']}
    Plug 'mileszs/ack.vim'
    Plug 'othree/html5.vim'
    Plug 'scrooloose/nerdcommenter'
    Plug 'scrooloose/nerdtree'
    Plug 'sumpygump/php-documentor-vim'
    Plug 'sumpygump/vim-php-debugger'
    Plug 'szw/vim-tags'
    Plug 'tpope/vim-fugitive'
    "Plug 'lvht/phpcd.vim', {'for': 'php', 'do': 'composer install'}
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'vim-scripts/Marks-Browser'
    Plug 'vim-scripts/ShowMarks'
    Plug 'vim-python/python-syntax'
    Plug '~/vimrc/vim/dist-plugins/qis'
    call plug#end()
endif

"NerdTree
let NERDTreeIgnore = ['\.pyc$', '__pycache__']

" Lilypond
if exists(':filetype')
    filetype off
    set runtimepath+=/usr/share/lilypond/2.18.2/vim/
    filetype on
endif

if exists(':let')
    " Settings for NerdTree
    let NERDTreeIgnore=['__pycache__', '\.pyc$']

    " Settings for showmarks
    let g:showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXZ"
    let g:showmarks_ignore_type = "hqm"

    " Settings for Ack
    let g:ackprg="ack-grep -H --nocolor --nogroup --column"

    " Supertab uses omni-completion
    "let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
    "let g:SuperTabDefaultCompletionType = "context"

    " Settings for ctrlp
    let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:10'

    " Settings for ALE
    let g:ale_lint_on_text_changed = 'never'
    let g:ale_lint_on_enter = 0
    let g:ale_linters = {'python': ['pylint'], 'php': ['phpcs'], 'cpp': ['g++']}
    let g:ale_fixers = {'python': ['black'], 'php': ['phpcbf'], 'cpp': ['astyle']}
    let g:ale_fix_on_save = 1
    let g:ale_pattern_options = {
    \   '.*.venv/.*$': {'ale_enabled': 0},
    \}
endif

" Functions {{{1
" -----------------------------------
if exists(':function')
    " Removes trailing spaces
    function! TrimWhiteSpace()
        %s/\s*$//e
    endfunction

    " Converts tabs to spaces
    function! TabsToSpaces()
        %s/\t/    /ge
    endfunction

    " Remove \r characters
    function! RemoveCarriageReturns()
        %s/\r//ge
    endfunction

    " Remove multiblank lines
    function! RemoveMultiblankLines()
        g/^\s*\n$/d
    endfunction

    " Cleanup file
    function! Cleanup()
        set fileformat=unix
        set expandtab
        call TrimWhiteSpace()
        call TabsToSpaces()
        call RemoveMultiblankLines()
        call RemoveCarriageReturns()
        echomsg "File Cleaned Up."
    endfunction

    " Fix some PHP styles (Zend standard)
    function! FixStyles()
        call FixControlStructureSpacing()
        " Put the opening brace of a function on a new line
        %s/\(public \|private \|protected \|\)\(static \|\)\s*function \(.*\))\s*{/\1\2function \3)\r    {/e
    endfunction

    " Fix some PHP standards
    function! FixControlStructureSpacing()
        " Fix spacing in if, for, foreach lines
        %s/\(if\|foreach\|for\)\s*(\(.*\))\s*\n\?\s*{/\1 (\2) {/e

        " Fix spacing in else lines
        %s/}\s*\n*\s*else\s*\n*\s*{/} else {/e

        " Fix spacing in elseif lines
        %s/}\s*\n*\s*elseif\s*(\(.*\))\s*\n\?\s*{/} elseif (\1) {/e
    endfunction

    " Check box
    function! s:CheckBox()
        normal mxF[lrX`x
    endfunction
    command! Checkbox call s:CheckBox()
    nmap <C-Space> :Checkbox<CR>

    " Uncheck box
    function! s:UncheckBox()
        normal mxF[lr `x
    endfunction
    command! Uncheckbox call s:UncheckBox()

    " Replace special chars like smart quotes and endashes
    function! s:ReplaceSpecialChars()
        %s/“/``/g
        %s/”/''/g
        %s/’/'/g
        %s/–/--/g " en-dash
        %s/—/---/g " em-dash
    endfunction
    command! ReplaceSpecialChars call s:ReplaceSpecialChars()
    " Switch between two different colorschemes
    function! s:SwapColorscheme()
        if exists("g:tango_night")
            if g:tango_night == 1
                let g:tango_night = 0
            else
                let g:tango_night = 1
            endif
        else
            let g:tango_night = 0
        endif
        colorscheme tango
    endfunction
    command! SwapColorscheme call s:SwapColorscheme()

    " Show syntax highlighting groups for word under cursor
    nmap <C-S-P> :call <SID>SynStack()<CR>
    function! <SID>SynStack()
        if !exists("*synstack")
            return
        endif
        echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
    endfunc

    if exists('*HexHighlight()')
      nmap <leader>h :call HexHighlight()<Return>
    endif

    " Use this to activate a python venv
    " Assumes you first cd to the directory where .venv exists
    " Then it will run .venv/bin/activate and propagate the environment vars
    " resulting from that into your vim session
    function! s:ActivateVenv()
    python3 << EOF
import os
import sys
import subprocess

project_base_dir = ".venv"
script = os.path.join(project_base_dir, "bin/activate")

pipe = subprocess.Popen("source {}; env".format(script), stdout=subprocess.PIPE, shell=True)

output = pipe.communicate()[0].decode('utf8').splitlines()
env = dict((line.split("=", 1) for line in output))
if env:
    os.environ.update(env)
    print("Loaded venv from {}".format(script))
else:
    print("No .venv found")
EOF
    endfunction
    command! Activate call s:ActivateVenv()
endif

" Load any machine specific directives {{{1
" -----------------------------------
if filereadable($HOME . "/.vim/user.vim")
    source $HOME/.vim/user.vim
endif
